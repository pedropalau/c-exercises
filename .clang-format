Language: Cpp
Standard: Cpp11

# Disables formatting completely.
DisableFormat: false

# The number of columns used for tab stops.
TabWidth: 4

# The way to use tab characters in the resulting file.
UseTab: ForIndentation

# Indent width for line continuations.
ContinuationIndentWidth: 2

# The number of columns to use for indentation.
IndentWidth: 4

# Indent case labels one level from the switch statement.
IndentCaseLabels: true

# Indent if a function definition or declaration is wrapped after the type.
IndentWrappedFunctionNames: false

# The column limit.
ColumnLimit: 80

# If true, horizontally aligns arguments after an open bracket.
AlignAfterOpenBracket: Align

# If true, aligns consecutive assignments.
AlignConsecutiveAssignments: false

# If true, aligns consecutive declarations.
AlignConsecutiveDeclarations: false

# If true, aligns escaped newlines as far left as possible. 
# Otherwise puts them into the right-most column.
AlignEscapedNewlinesLeft: true

# AlignOperands (bool)
AlignOperands: true

# If true, aligns trailing comments.
AlignTrailingComments: true

# If the function declaration doesn’t fit on a line, allow putting all 
# parameters of a function declaration onto the next line even if 
# BinPackParameters is false.
AllowAllParametersOfDeclarationOnNextLine: true

# Allows contracting simple braced statements to a single line.
AllowShortBlocksOnASingleLine: true

# If true, short case labels will be contracted to a single line.
AllowShortCaseLabelsOnASingleLine: false

# Dependent on the value, int f() { return 0; } can be put on a single line.
AllowShortFunctionsOnASingleLine: Empty

# If true, if (a) return; can be put on a single line.
AllowShortIfStatementsOnASingleLine: true

# If true, while (true) continue; can be put on a single line.
AllowShortLoopsOnASingleLine: true

# The function declaration return type breaking style to use.
AlwaysBreakAfterReturnType: None

# If true, always break before multiline string literals.
AlwaysBreakBeforeMultilineStrings: false

# The template declaration breaking style to use
AlwaysBreakTemplateDeclarations: false

# If false, a function call’s arguments will either
# be all on the same line or will have one line each.
BinPackArguments: true

# If false, a function declaration’s or function definition’s
# parameters will either all be on the same line or will have one line each.
BinPackParameters: true

# Control of individual brace wrapping cases.
BraceWrapping:
  # Wrap class definitions.
  AfterClass: false
  # Wrap control statements (if/for/while/switch/..).
  AfterControlStatement: false
  # Wrap enum definitions.
  AfterEnum: false
  # Wrap function definitions.
  AfterFunction: false
  # Wrap namespace definitions.
  AfterNamespace: false
  # Wrap ObjC definitions
  AfterObjCDeclaration: false
  # Wrap struct definitions.
  AfterStruct: false
  # Wrap union definitions.
  AfterUnion: false
  # Wrap before catch.
  BeforeCatch: false
  # Wrap before else.
  BeforeElse: false
  # Indent the wrapped braces themselves.
  IndentBraces: false

# The way to wrap binary operators.
BreakBeforeBinaryOperators: None

# The brace breaking style to use.
BreakBeforeBraces: Allman

# If true, ternary operators will be placed after line breaks.
BreakBeforeTernaryOperators: true

# Always break constructor initializers before commas and align the commas with the colon.
BreakConstructorInitializersBeforeComma: false

# A regular expression that describes comments with special meaning, 
# which should not be split into lines or otherwise changed.
CommentPragmas: '^ IWYU pragma:'

# If the constructor initializers don’t fit on a line, put each initializer on its own line.
ConstructorInitializerAllOnOneLineOrOnePerLine: false

# The number of characters to use for indentation of constructor
# initializer lists as well as inheritance lists.
ConstructorInitializerIndentWidth: 4

# If true, format braced lists as best suited for C++11 braced lists.
Cpp11BracedListStyle: true

# If true, analyze the formatted file for the most common alignment of & and *.
# Pointer and reference alignment styles are going to be updated according to the preferences found in the file.
# PointerAlignment is then used only as fallback.
DerivePointerAlignment: false

# If true, clang-format detects whether function calls and
# definitions are formatted with one parameter per line.
ExperimentalAutoDetectBinPacking: false

# A vector of macros that should be interpreted as foreach loops instead of as function calls.
ForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH ]

# Regular expressions denoting the different #include categories used for ordering #includes.
IncludeCategories:
  - Regex: '^"(llvm|llvm-c|clang|clang-c)/'
    Priority: 2
  - Regex: '^(<|"(gtest|isl|json)/)'
    Priority: 3
  - Regex: '.*'
    Priority: 1

# If true, the empty line at the start of blocks is kept.
KeepEmptyLinesAtTheStartOfBlocks: false

# A regular expression matching macros that start a block.
MacroBlockBegin: ''

# A regular expression matching macros that end a block.
MacroBlockEnd: ''

# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 1

# The indentation used for namespaces.
NamespaceIndentation: All

# The number of characters to use for indentation of ObjC blocks.
ObjCBlockIndentWidth: 4

# Add a space after @property in Objective-C,
# i.e. use @property (readonly) instead of @property(readonly).
ObjCSpaceAfterProperty: false

# Add a space in front of an Objective-C protocol list,
# i.e. use Foo <Protocol> instead of Foo<Protocol>.
ObjCSpaceBeforeProtocolList: true

# The penalty for breaking a function call after call(.
PenaltyBreakBeforeFirstCallParameter: 19

# The penalty for each line break introduced inside a comment.
PenaltyBreakComment: 300

# The penalty for breaking before the first <<.
PenaltyBreakFirstLessLess: 120

# The penalty for each line break introduced inside a string literal.
PenaltyBreakString: 1000

# The penalty for each character outside of the column limit.
PenaltyExcessCharacter: 1000000

# Penalty for putting the return type of a function onto its own line.
PenaltyReturnTypeOnItsOwnLine: 60

# Pointer and reference alignment style.
PointerAlignment: Right

# If true, clang-format will attempt to re-flow comments.
ReflowComments: true

# If true, clang-format will sort #includes. 
SortIncludes: true

# If true, a space is inserted after C style casts.
SpaceAfterCStyleCast: true

# If false, spaces will be removed before assignment operators.
SpaceBeforeAssignmentOperators: true

# Defines in which cases to put a space before opening parentheses.
SpaceBeforeParens: ControlStatements

# If true, spaces may be inserted into ().
SpaceInEmptyParentheses: false

# The number of spaces before trailing line comments (// - comments).
SpacesBeforeTrailingComments: 1

# If true, spaces will be inserted after < and before > in template argument lists.
SpacesInAngles: false

# If true, spaces are inserted inside container literals
# (e.g. ObjC and Javascript array and dict literals).
SpacesInContainerLiterals: false

# If true, spaces may be inserted into C style casts.
SpacesInCStyleCastParentheses: false

# If true, spaces will be inserted after ( and before ).
SpacesInParentheses: false

# If true, spaces will be inserted after [ and before ]. 
# Lambdas or unspecified size array declarations will not be affected.
SpacesInSquareBrackets: false
...
